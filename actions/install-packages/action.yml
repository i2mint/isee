name: Install Packages
inputs:
  pypi-packages:
    description: 'Python packages to install'
    required: false
  apt-packages:
    description: 'APT packages to install'
    required: false
  npm-packages:
    description: 'NPM packages to install'
    required: false
  dependency-files:
    description: 'Paths to dependency files. Can be a requirements.txt or a setup.cfg file'
    required: false
  test-requirements-file:
    description: "Paths to requirements files. Provide a comma separated list of paths from the current directory. '.txt' files will be pip installed. '.cfg' files will be parsed and the install_requires and tests_require sections will be installed."
    required: false
  ssh-private-key:
    description: 'SSH private key to install private packages from source, if any.'
    required: false
runs:
  using: 'composite'
  steps:
    - name: Configure SSH
      if: ${{ inputs.ssh-private-key }}
      uses: webfactory/ssh-agent@v0.7.0
      with:
          ssh-private-key: ${{ inputs.ssh-private-key }}
    
    - name: Install Pypi Packages
      if: ${{ inputs.pypi-packages }}
      shell: bash
      run: |
        set -e
        echo "::group::Pip Installation Log"
        echo "Upgrading pip and wheel"
        python -m pip install --upgrade pip wheel
        
        if [[ "${{ inputs.pypi-packages }}" == "isee" && "${{ github.repository }}" == "i2mint/isee" ]]; then
          echo "Installing isee from source"
          python setup.py sdist
          python -m pip install $(ls -t dist/isee-*.tar.gz 2>/dev/null | head -n 1)
        elif [[ "${{ inputs.pypi-packages }}" == "wads" && "${{ github.repository }}" == "i2mint/wads" ]]; then
          echo "Installing wads from source"
          python setup.py sdist
          python -m pip install $(ls -t dist/wads-*.tar.gz 2>/dev/null | head -n 1)
        else
          echo "Installing packages: ${{ inputs.pypi-packages }}"
          python -m pip install ${{ inputs.pypi-packages }}
          echo "Installed packages versions:"
          python -m pip list | grep -E "$(echo ${{ inputs.pypi-packages }} | tr ' ' '|')"
        fi
        echo "::endgroup::"
        
    - name: Install APT Packages
      if: ${{ inputs.apt-packages }}
      shell: bash
      run: |
        set -e
        echo "::group::APT Installation Log"
        echo "Updating APT repositories"
        sudo apt-get update
        echo "Installing packages: ${{ inputs.apt-packages }}"
        sudo apt-get install -y ${{ inputs.apt-packages }}
        echo "Installed APT packages versions:"
        dpkg -l | grep -E "$(echo ${{ inputs.apt-packages }} | tr ' ' '|')"
        echo "::endgroup::"
    
    - name: Install NPM Packages
      if: ${{ inputs.npm-packages }}
      shell: bash
      run: |
        set -e
        echo "::group::NPM Installation Log"
        echo "Installing packages: ${{ inputs.npm-packages }}"
        npm install -g ${{ inputs.npm-packages }}
        echo "Installed NPM packages versions:"
        npm list -g --depth=0 | grep -E "$(echo ${{ inputs.npm-packages }} | tr ' ' '|')"
        echo "::endgroup::"
    
    - name: Install Dependencies
      if: ${{ inputs.dependency-files }}
      shell: bash
      run: |
        set -e
        echo "::group::Dependencies Installation Log"
        echo "Upgrading pip and wheel"
        python -m pip install --upgrade pip wheel
        
        IFS=',' read -ra paths <<< "${{ inputs.dependency-files }}"
        for path in "${paths[@]}"
        do
          isee_installed=false
          if [[ $path == *.txt ]]; then
            echo "Installing requirements from $path"
            python -m pip install -r $path
            echo "Completed installing requirements from $path"
          elif [[ $path == *.cfg ]]; then
            if [ "$isee_installed" == "false" ]; then
              if [ "${{ github.repository }}" == "i2mint/isee" ]; then
                echo "Installing isee from source"
                python setup.py sdist
                python -m pip install $(ls -t dist/isee-*.tar.gz 2>/dev/null | head -n 1)
              else
                echo "Installing isee from pip"
                pip -q install isee
              fi
              isee_installed=true
            fi
            echo "Running isee install-requires"
            isee install-requires
            echo "Running isee tests-require"
            isee tests-require
          fi
        done
        
        echo "Installed Python packages:"
        python -m pip list
        echo "::endgroup::"
